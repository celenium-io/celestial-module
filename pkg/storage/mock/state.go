// Code generated by MockGen. DO NOT EDIT.
// Source: state.go
//
// Generated by this command:
//
//	mockgen -source=state.go -destination=mock/state.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/celestial-module/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockICelestialState is a mock of ICelestialState interface.
type MockICelestialState struct {
	ctrl     *gomock.Controller
	recorder *MockICelestialStateMockRecorder
}

// MockICelestialStateMockRecorder is the mock recorder for MockICelestialState.
type MockICelestialStateMockRecorder struct {
	mock *MockICelestialState
}

// NewMockICelestialState creates a new mock instance.
func NewMockICelestialState(ctrl *gomock.Controller) *MockICelestialState {
	mock := &MockICelestialState{ctrl: ctrl}
	mock.recorder = &MockICelestialStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICelestialState) EXPECT() *MockICelestialStateMockRecorder {
	return m.recorder
}

// ByName mocks base method.
func (m *MockICelestialState) ByName(ctx context.Context, name string) (storage.CelestialState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByName", ctx, name)
	ret0, _ := ret[0].(storage.CelestialState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByName indicates an expected call of ByName.
func (mr *MockICelestialStateMockRecorder) ByName(ctx, name any) *MockICelestialStateByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByName", reflect.TypeOf((*MockICelestialState)(nil).ByName), ctx, name)
	return &MockICelestialStateByNameCall{Call: call}
}

// MockICelestialStateByNameCall wrap *gomock.Call
type MockICelestialStateByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICelestialStateByNameCall) Return(arg0 storage.CelestialState, arg1 error) *MockICelestialStateByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICelestialStateByNameCall) Do(f func(context.Context, string) (storage.CelestialState, error)) *MockICelestialStateByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICelestialStateByNameCall) DoAndReturn(f func(context.Context, string) (storage.CelestialState, error)) *MockICelestialStateByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockICelestialState) Save(ctx context.Context, state *storage.CelestialState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockICelestialStateMockRecorder) Save(ctx, state any) *MockICelestialStateSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockICelestialState)(nil).Save), ctx, state)
	return &MockICelestialStateSaveCall{Call: call}
}

// MockICelestialStateSaveCall wrap *gomock.Call
type MockICelestialStateSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICelestialStateSaveCall) Return(arg0 error) *MockICelestialStateSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICelestialStateSaveCall) Do(f func(context.Context, *storage.CelestialState) error) *MockICelestialStateSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICelestialStateSaveCall) DoAndReturn(f func(context.Context, *storage.CelestialState) error) *MockICelestialStateSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
