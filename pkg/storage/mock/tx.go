// Code generated by MockGen. DO NOT EDIT.
// Source: tx.go
//
// Generated by this command:
//
//	mockgen -source=tx.go -destination=mock/tx.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	iter "iter"
	reflect "reflect"

	storage "github.com/celenium-io/celestial-module/pkg/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockCelestialTransaction is a mock of CelestialTransaction interface.
type MockCelestialTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockCelestialTransactionMockRecorder
}

// MockCelestialTransactionMockRecorder is the mock recorder for MockCelestialTransaction.
type MockCelestialTransactionMockRecorder struct {
	mock *MockCelestialTransaction
}

// NewMockCelestialTransaction creates a new mock instance.
func NewMockCelestialTransaction(ctrl *gomock.Controller) *MockCelestialTransaction {
	mock := &MockCelestialTransaction{ctrl: ctrl}
	mock.recorder = &MockCelestialTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCelestialTransaction) EXPECT() *MockCelestialTransactionMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCelestialTransaction) Add(ctx context.Context, model any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCelestialTransactionMockRecorder) Add(ctx, model any) *MockCelestialTransactionAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCelestialTransaction)(nil).Add), ctx, model)
	return &MockCelestialTransactionAddCall{Call: call}
}

// MockCelestialTransactionAddCall wrap *gomock.Call
type MockCelestialTransactionAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionAddCall) Return(arg0 error) *MockCelestialTransactionAddCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionAddCall) Do(f func(context.Context, any) error) *MockCelestialTransactionAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionAddCall) DoAndReturn(f func(context.Context, any) error) *MockCelestialTransactionAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BulkSave mocks base method.
func (m *MockCelestialTransaction) BulkSave(ctx context.Context, models []any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkSave", ctx, models)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkSave indicates an expected call of BulkSave.
func (mr *MockCelestialTransactionMockRecorder) BulkSave(ctx, models any) *MockCelestialTransactionBulkSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSave", reflect.TypeOf((*MockCelestialTransaction)(nil).BulkSave), ctx, models)
	return &MockCelestialTransactionBulkSaveCall{Call: call}
}

// MockCelestialTransactionBulkSaveCall wrap *gomock.Call
type MockCelestialTransactionBulkSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionBulkSaveCall) Return(arg0 error) *MockCelestialTransactionBulkSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionBulkSaveCall) Do(f func(context.Context, []any) error) *MockCelestialTransactionBulkSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionBulkSaveCall) DoAndReturn(f func(context.Context, []any) error) *MockCelestialTransactionBulkSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockCelestialTransaction) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCelestialTransactionMockRecorder) Close(ctx any) *MockCelestialTransactionCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCelestialTransaction)(nil).Close), ctx)
	return &MockCelestialTransactionCloseCall{Call: call}
}

// MockCelestialTransactionCloseCall wrap *gomock.Call
type MockCelestialTransactionCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionCloseCall) Return(arg0 error) *MockCelestialTransactionCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionCloseCall) Do(f func(context.Context) error) *MockCelestialTransactionCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionCloseCall) DoAndReturn(f func(context.Context) error) *MockCelestialTransactionCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyFrom mocks base method.
func (m *MockCelestialTransaction) CopyFrom(ctx context.Context, tableName string, data []storage0.Copiable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", ctx, tableName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockCelestialTransactionMockRecorder) CopyFrom(ctx, tableName, data any) *MockCelestialTransactionCopyFromCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockCelestialTransaction)(nil).CopyFrom), ctx, tableName, data)
	return &MockCelestialTransactionCopyFromCall{Call: call}
}

// MockCelestialTransactionCopyFromCall wrap *gomock.Call
type MockCelestialTransactionCopyFromCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionCopyFromCall) Return(arg0 error) *MockCelestialTransactionCopyFromCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionCopyFromCall) Do(f func(context.Context, string, []storage0.Copiable) error) *MockCelestialTransactionCopyFromCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionCopyFromCall) DoAndReturn(f func(context.Context, string, []storage0.Copiable) error) *MockCelestialTransactionCopyFromCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MockCelestialTransaction) Exec(ctx context.Context, query string, params ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockCelestialTransactionMockRecorder) Exec(ctx, query any, params ...any) *MockCelestialTransactionExecCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, params...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockCelestialTransaction)(nil).Exec), varargs...)
	return &MockCelestialTransactionExecCall{Call: call}
}

// MockCelestialTransactionExecCall wrap *gomock.Call
type MockCelestialTransactionExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionExecCall) Return(arg0 int64, arg1 error) *MockCelestialTransactionExecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionExecCall) Do(f func(context.Context, string, ...any) (int64, error)) *MockCelestialTransactionExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionExecCall) DoAndReturn(f func(context.Context, string, ...any) (int64, error)) *MockCelestialTransactionExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Flush mocks base method.
func (m *MockCelestialTransaction) Flush(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockCelestialTransactionMockRecorder) Flush(ctx any) *MockCelestialTransactionFlushCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockCelestialTransaction)(nil).Flush), ctx)
	return &MockCelestialTransactionFlushCall{Call: call}
}

// MockCelestialTransactionFlushCall wrap *gomock.Call
type MockCelestialTransactionFlushCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionFlushCall) Return(arg0 error) *MockCelestialTransactionFlushCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionFlushCall) Do(f func(context.Context) error) *MockCelestialTransactionFlushCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionFlushCall) DoAndReturn(f func(context.Context) error) *MockCelestialTransactionFlushCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleError mocks base method.
func (m *MockCelestialTransaction) HandleError(ctx context.Context, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleError", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleError indicates an expected call of HandleError.
func (mr *MockCelestialTransactionMockRecorder) HandleError(ctx, err any) *MockCelestialTransactionHandleErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockCelestialTransaction)(nil).HandleError), ctx, err)
	return &MockCelestialTransactionHandleErrorCall{Call: call}
}

// MockCelestialTransactionHandleErrorCall wrap *gomock.Call
type MockCelestialTransactionHandleErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionHandleErrorCall) Return(arg0 error) *MockCelestialTransactionHandleErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionHandleErrorCall) Do(f func(context.Context, error) error) *MockCelestialTransactionHandleErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionHandleErrorCall) DoAndReturn(f func(context.Context, error) error) *MockCelestialTransactionHandleErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Rollback mocks base method.
func (m *MockCelestialTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockCelestialTransactionMockRecorder) Rollback(ctx any) *MockCelestialTransactionRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockCelestialTransaction)(nil).Rollback), ctx)
	return &MockCelestialTransactionRollbackCall{Call: call}
}

// MockCelestialTransactionRollbackCall wrap *gomock.Call
type MockCelestialTransactionRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionRollbackCall) Return(arg0 error) *MockCelestialTransactionRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionRollbackCall) Do(f func(context.Context) error) *MockCelestialTransactionRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionRollbackCall) DoAndReturn(f func(context.Context) error) *MockCelestialTransactionRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveCelestials mocks base method.
func (m *MockCelestialTransaction) SaveCelestials(ctx context.Context, celestials iter.Seq[storage.Celestial]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCelestials", ctx, celestials)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCelestials indicates an expected call of SaveCelestials.
func (mr *MockCelestialTransactionMockRecorder) SaveCelestials(ctx, celestials any) *MockCelestialTransactionSaveCelestialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCelestials", reflect.TypeOf((*MockCelestialTransaction)(nil).SaveCelestials), ctx, celestials)
	return &MockCelestialTransactionSaveCelestialsCall{Call: call}
}

// MockCelestialTransactionSaveCelestialsCall wrap *gomock.Call
type MockCelestialTransactionSaveCelestialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionSaveCelestialsCall) Return(arg0 error) *MockCelestialTransactionSaveCelestialsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionSaveCelestialsCall) Do(f func(context.Context, iter.Seq[storage.Celestial]) error) *MockCelestialTransactionSaveCelestialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionSaveCelestialsCall) DoAndReturn(f func(context.Context, iter.Seq[storage.Celestial]) error) *MockCelestialTransactionSaveCelestialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tx mocks base method.
func (m *MockCelestialTransaction) Tx() *bun.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(*bun.Tx)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockCelestialTransactionMockRecorder) Tx() *MockCelestialTransactionTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockCelestialTransaction)(nil).Tx))
	return &MockCelestialTransactionTxCall{Call: call}
}

// MockCelestialTransactionTxCall wrap *gomock.Call
type MockCelestialTransactionTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionTxCall) Return(arg0 *bun.Tx) *MockCelestialTransactionTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionTxCall) Do(f func() *bun.Tx) *MockCelestialTransactionTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionTxCall) DoAndReturn(f func() *bun.Tx) *MockCelestialTransactionTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockCelestialTransaction) Update(ctx context.Context, model any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCelestialTransactionMockRecorder) Update(ctx, model any) *MockCelestialTransactionUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCelestialTransaction)(nil).Update), ctx, model)
	return &MockCelestialTransactionUpdateCall{Call: call}
}

// MockCelestialTransactionUpdateCall wrap *gomock.Call
type MockCelestialTransactionUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionUpdateCall) Return(arg0 error) *MockCelestialTransactionUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionUpdateCall) Do(f func(context.Context, any) error) *MockCelestialTransactionUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionUpdateCall) DoAndReturn(f func(context.Context, any) error) *MockCelestialTransactionUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateState mocks base method.
func (m *MockCelestialTransaction) UpdateState(ctx context.Context, state *storage.CelestialState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockCelestialTransactionMockRecorder) UpdateState(ctx, state any) *MockCelestialTransactionUpdateStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockCelestialTransaction)(nil).UpdateState), ctx, state)
	return &MockCelestialTransactionUpdateStateCall{Call: call}
}

// MockCelestialTransactionUpdateStateCall wrap *gomock.Call
type MockCelestialTransactionUpdateStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionUpdateStateCall) Return(arg0 error) *MockCelestialTransactionUpdateStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionUpdateStateCall) Do(f func(context.Context, *storage.CelestialState) error) *MockCelestialTransactionUpdateStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionUpdateStateCall) DoAndReturn(f func(context.Context, *storage.CelestialState) error) *MockCelestialTransactionUpdateStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatusForAddress mocks base method.
func (m *MockCelestialTransaction) UpdateStatusForAddress(ctx context.Context, addressId ...iter.Seq[uint64]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addressId {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatusForAddress", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusForAddress indicates an expected call of UpdateStatusForAddress.
func (mr *MockCelestialTransactionMockRecorder) UpdateStatusForAddress(ctx any, addressId ...any) *MockCelestialTransactionUpdateStatusForAddressCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addressId...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusForAddress", reflect.TypeOf((*MockCelestialTransaction)(nil).UpdateStatusForAddress), varargs...)
	return &MockCelestialTransactionUpdateStatusForAddressCall{Call: call}
}

// MockCelestialTransactionUpdateStatusForAddressCall wrap *gomock.Call
type MockCelestialTransactionUpdateStatusForAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCelestialTransactionUpdateStatusForAddressCall) Return(arg0 error) *MockCelestialTransactionUpdateStatusForAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCelestialTransactionUpdateStatusForAddressCall) Do(f func(context.Context, ...iter.Seq[uint64]) error) *MockCelestialTransactionUpdateStatusForAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCelestialTransactionUpdateStatusForAddressCall) DoAndReturn(f func(context.Context, ...iter.Seq[uint64]) error) *MockCelestialTransactionUpdateStatusForAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
